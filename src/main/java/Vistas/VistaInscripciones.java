package Vistas;

import Entidades.Alumno;
import Entidades.AlumnoData;
import Entidades.Inscripcion;
import Entidades.InscripcionData;
import Entidades.Materia;
import Utilidades.ComboBox;
import Utilidades.Tabla;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class VistaInscripciones extends javax.swing.JInternalFrame {

  /**
   * Creates new form VistaInscripciones
   */
  public VistaInscripciones() {
    initComponents();

    // Se agregan al grupo de radio botones los radio de "materias inscriptas" y
    // "materias no isncriptas"
    radioGrupo.add(radioInscriptas);
    radioGrupo.add(radioNoInscriptas);

    // Se activa por defecto el radio botón de "materias inscriptas"
    radioInscriptas.setSelected(true);

    // Se desactivan los botones de "inscribir" y "anular inscripción"
    botonInscribir.setEnabled(false);
    botonAnularInscripcion.setEnabled(false);

    // Crea las cabeceras para la tabla "tablaAlumnosPorMateria" usando el
    // método estático de la clase Tabla
    Tabla.crearCabeceras(tablaMaterias, modelo, new String[]{"ID", "Nombre", "Año"}, new int[]{50, 400, 50});

    // Ejecuta la tarea de carga de alumnos en un hilo separado para no
    // bloquear la interfaz de usuario. Cuando la carga está completada llena el
    // JComboBox
    CompletableFuture.supplyAsync(() -> {
      AlumnoData alumnoData = new AlumnoData();
      List<Alumno> alumnos = alumnoData.listarAlumnos();

      return alumnos;
    }).thenAccept(alumnos -> {
      ComboBox.llenar(comboAlumnos, alumnos);
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    radioGrupo = new javax.swing.ButtonGroup();
    jLabel1 = new javax.swing.JLabel();
    comboAlumnos = new javax.swing.JComboBox<>();
    jLabel2 = new javax.swing.JLabel();
    radioInscriptas = new javax.swing.JRadioButton();
    radioNoInscriptas = new javax.swing.JRadioButton();
    botonInscribir = new javax.swing.JButton();
    botonAnularInscripcion = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    tablaMaterias = new javax.swing.JTable();

    setClosable(true);
    setTitle("Inscripciones");

    jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel1.setText("Seleccione un Alumno:");

    comboAlumnos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    comboAlumnos.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        comboAlumnosItemStateChanged(evt);
      }
    });
    comboAlumnos.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        comboAlumnosActionPerformed(evt);
      }
    });

    jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel2.setText("Listar:");

    radioInscriptas.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    radioInscriptas.setText("Materias Inscriptas");
    radioInscriptas.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        radioInscriptasActionPerformed(evt);
      }
    });

    radioNoInscriptas.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    radioNoInscriptas.setText("Materias No Inscriptas");
    radioNoInscriptas.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        radioNoInscriptasActionPerformed(evt);
      }
    });

    botonInscribir.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    botonInscribir.setText("Inscribir");
    botonInscribir.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonInscribirActionPerformed(evt);
      }
    });

    botonAnularInscripcion.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    botonAnularInscripcion.setText("Anular Inscripción");
    botonAnularInscripcion.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        botonAnularInscripcionActionPerformed(evt);
      }
    });

    tablaMaterias.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    tablaMaterias.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    tablaMaterias.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        tablaMateriasMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(tablaMaterias);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(195, 195, 195)
        .addComponent(jLabel2)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(radioInscriptas)
          .addComponent(radioNoInscriptas))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addGap(0, 27, Short.MAX_VALUE)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(32, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGap(90, 90, 90)
        .addComponent(jLabel1)
        .addGap(18, 18, 18)
        .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGap(208, 208, 208)
        .addComponent(botonInscribir, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(112, 112, 112)
        .addComponent(botonAnularInscripcion)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(75, 75, 75)
            .addComponent(radioInscriptas)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(radioNoInscriptas))
          .addGroup(layout.createSequentialGroup()
            .addGap(19, 19, 19)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(jLabel1)
              .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(37, 37, 37)
            .addComponent(jLabel2)))
        .addGap(37, 37, 37)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(botonInscribir)
          .addComponent(botonAnularInscripcion))
        .addGap(19, 19, 19))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void comboAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlumnosActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_comboAlumnosActionPerformed

  private void comboAlumnosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboAlumnosItemStateChanged
    // TODO add your handling code here:
    // Se selecciona por defecto el radio botón de "inscriptas"
    radioInscriptas.setSelected(true);

    // Llama al método que renderiza la tabla
    renderizarTablaDeMaterias();
  }//GEN-LAST:event_comboAlumnosItemStateChanged

  private void radioInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioInscriptasActionPerformed
    // TODO add your handling code here:
    // Llama al método que renderiza la tabla
    renderizarTablaDeMaterias();
  }//GEN-LAST:event_radioInscriptasActionPerformed

  private void radioNoInscriptasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioNoInscriptasActionPerformed
    // TODO add your handling code here:
    // Llama al método que renderiza la tabla
    renderizarTablaDeMaterias();
  }//GEN-LAST:event_radioNoInscriptasActionPerformed

  private void botonInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInscribirActionPerformed
    // TODO add your handling code here:
    // Obtiene el alumno del JComboBox
    Alumno alumno = (Alumno) comboAlumnos.getSelectedItem();

    // Obtiene los datos de la materia a partir de la fila de la tabla
    // seleccionada
    int fila = tablaMaterias.getSelectedRow();
    int idMateria = (int) tablaMaterias.getModel().getValueAt(fila, 0);
    String nombre = (String) tablaMaterias.getModel().getValueAt(fila, 1);
    int anio = (int) tablaMaterias.getModel().getValueAt(fila, 2);
    Materia materia = new Materia(idMateria, nombre, anio, true);

    // Instancia un objeto Inscripcion
    Inscripcion inscripcion = new Inscripcion(alumno, materia, 0.00);

    // Guarda la inscripción en la base de datos
    InscripcionData inscripciónData = new InscripcionData();
    boolean res = inscripciónData.guardarInscripcion(inscripcion);

    // Se selecciona por defecto el radio botón de "inscriptas"
    radioInscriptas.setSelected(true);

    // Llama al método que renderiza la tabla
    renderizarTablaDeMaterias();

    // Muestra un mensase de díalogo, dependiendo la respuesta.
    if (res) {
      JOptionPane.showMessageDialog(this, "Inscripción realizada");
    } else {
      JOptionPane.showMessageDialog(this, "Hubo un problema al realizar la inscripción");
    }
  }//GEN-LAST:event_botonInscribirActionPerformed

  private void botonAnularInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAnularInscripcionActionPerformed
    // TODO add your handling code here:
    // Obtiene el alumno del JComboBox
    Alumno alumno = (Alumno) comboAlumnos.getSelectedItem();

    // Obtiene los datos de la materia a partir de la fila de la tabla
    // seleccionada
    int fila = tablaMaterias.getSelectedRow();
    int idMateria = (int) tablaMaterias.getModel().getValueAt(fila, 0);

    // Instancia un objeto Inscripcion
    InscripcionData inscripciónData = new InscripcionData();
    boolean res = inscripciónData.borrarInscripcionMateriaAlumno(alumno.getIdAlumno(), idMateria);

    // Llama al método que renderiza la tabla
    renderizarTablaDeMaterias();

    // Muestra un mensase de díalogo, dependiendo la respuesta.
    if (res) {
      JOptionPane.showMessageDialog(this, "Inscripción anulada");
    } else {
      JOptionPane.showMessageDialog(this, "Hubo un problema al anular la inscripción");
    }
  }//GEN-LAST:event_botonAnularInscripcionActionPerformed

  private void tablaMateriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMateriasMouseClicked
    // TODO add your handling code here:
    if (radioInscriptas.isSelected()) {
      botonInscribir.setEnabled(false);
      botonAnularInscripcion.setEnabled(true);
    } else {
      botonInscribir.setEnabled(true);
      botonAnularInscripcion.setEnabled(false);
    }
  }//GEN-LAST:event_tablaMateriasMouseClicked

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton botonAnularInscripcion;
  private javax.swing.JButton botonInscribir;
  private javax.swing.JComboBox<Alumno> comboAlumnos;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.ButtonGroup radioGrupo;
  private javax.swing.JRadioButton radioInscriptas;
  private javax.swing.JRadioButton radioNoInscriptas;
  private javax.swing.JTable tablaMaterias;
  // End of variables declaration//GEN-END:variables

// Crea un nuevo modelo para la JTable
  private final DefaultTableModel modelo = new DefaultTableModel() {
    @Override
    public boolean isCellEditable(int row, int col) {
      return false;
    }
  };

  /**
   * Renderiza la tabla de materias en la interfaz de usuario.
   * <p>
   * Este método renderiza el modelo de la tabla y, dependiendo del JRadioButton
   * seleccionado, obtiene las materias cursadas ó las materias NO cursadas por
   * el alumno activo en el JComboBox.
   * </p>
   */
  private void renderizarTablaDeMaterias() {
    botonInscribir.setEnabled(false);
    botonAnularInscripcion.setEnabled(false);

    Tabla.limpiarTabla(modelo);

    InscripcionData inscripcionData = new InscripcionData();

    List<Materia> materiasCursadas;
    if (radioInscriptas.isSelected()) {
      materiasCursadas = inscripcionData.obtenerMateriasCursadas(((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno());
    } else {
      materiasCursadas = inscripcionData.obtenerMateriasNoCursadas(((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno());
    }

    materiasCursadas.forEach(materia -> modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), materia.getAnioMateria()}));
  }
}
