/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import Entidades.Alumno;
import Entidades.AlumnoData;
import Entidades.Inscripcion;
import Entidades.InscripcionData;

import Utilidades.ComboBox;
import Utilidades.Tabla;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class VistaManejoDeNotas extends javax.swing.JInternalFrame {

    /**
     * Creates new form ManejoDeNotas
     */
    public VistaManejoDeNotas() {
        initComponents();
        CompletableFuture.supplyAsync(() -> {
            AlumnoData alumnoData = new AlumnoData();
            List<Alumno> alumnos = alumnoData.listarAlumnos();

            return alumnos;
        }).thenAccept(alumnos -> {
            ComboBox.llenar(comboAlumnos, alumnos);
        });

        Tabla.crearCabeceras(tablaMaterias, modelo, new String[]{"id", "Nombre", "Nota"}, new int[]{75, 400, 400});

        // Agrega un TableModelListener al modelo para escuchar cambios en la tabla
        modelo.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                // Verifica si el evento de cambio es una actualización de una celda
                if (e.getType() == TableModelEvent.UPDATE) {
                    // Obtiene el índice de la primera fila modificada
                    int fila = e.getFirstRow();
                    // Añade la fila modificada a la lista de filas modificadas
                    filasModificadas.add(fila);
                    // Imprime un mensaje en la consola indicando la fila que fue modificada
                    System.out.println("Fila modificada: " + fila);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboAlumnos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMaterias = new javax.swing.JTable();
        jBActualizar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTexto = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Notas");
        setPreferredSize(new java.awt.Dimension(778, 576));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Seleccione un Alumno:");

        comboAlumnos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        comboAlumnos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboAlumnosItemStateChanged(evt);
            }
        });
        comboAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlumnosActionPerformed(evt);
            }
        });

        tablaMaterias.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tablaMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaMaterias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMateriasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMaterias);

        jBActualizar.setText("Actualizar");
        jBActualizar.setMaximumSize(new java.awt.Dimension(61, 27));
        jBActualizar.setMinimumSize(new java.awt.Dimension(61, 27));
        jBActualizar.setPreferredSize(new java.awt.Dimension(61, 27));
        jBActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBActualizarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Materias cursadas");

        jTexto.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jTexto.setForeground(new java.awt.Color(16, 88, 34));
        jTexto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTexto.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(295, 295, 295)
                        .addComponent(jBActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboAlumnosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboAlumnosItemStateChanged

        Tabla.limpiarTabla(modelo);

        InscripcionData inscripcionData = new InscripcionData();
        List<Inscripcion> inscripciones = inscripcionData.obtenerInscripcionesPorAlumno(((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno());

        inscripciones.forEach(inscripcion -> modelo.addRow(new Object[]{inscripcion.getMateria().getIdMateria(), inscripcion.getMateria().getNombre(), inscripcion.getNota()}));

    }//GEN-LAST:event_comboAlumnosItemStateChanged

    private void comboAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlumnosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboAlumnosActionPerformed

    private void tablaMateriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMateriasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaMateriasMouseClicked

    private void jBActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBActualizarActionPerformed
        // TODO add your handling code here:

        InscripcionData inscripcionData = new InscripcionData();
        boolean bandera = false;

        //Recorre cada fila modificada dentro del HashSet filasModificadas
        for (int fila : filasModificadas) {
            //Obtenemos el id del alumno seleccionado del comboBox
            int idAlumno = ((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno();
            //Obtenemos los datos de la tabla
            int idMateria = (int) tablaMaterias.getModel().getValueAt(fila, 0);
            double nota = Double.parseDouble(tablaMaterias.getModel().getValueAt(fila, 2).toString());

            // Actualiza la nota del alumno en la base de datos
            boolean res = inscripcionData.actualizarNota(idAlumno, idMateria, nota);
            // Si la actualización de la nota falla, se establece la bandera a true
            if (!res) {
                bandera = true;
            }
        }

        if (!bandera) {
            if (filasModificadas.size() == 1) {
                jTexto.setText(filasModificadas.size() + " fila fue modificada");
                // JOptionPane.showMessageDialog(this, "Nota actualizada");
            } else {
                jTexto.setText(filasModificadas.size() + " filas fueron modificadas");
                //JOptionPane.showMessageDialog(this, "Notas actualizadas");
            }
            // Define la duración en milisegundos (por ejemplo, 3 segundos)
        } else {
            JOptionPane.showMessageDialog(this, "Hubo un problema al actualizar la/s nota/s");
        }

        // Limpia la lista de filasModificadas
        filasModificadas.clear();
    }//GEN-LAST:event_jBActualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Alumno> comboAlumnos;
    private javax.swing.JButton jBActualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jTexto;
    private javax.swing.JTable tablaMaterias;
    // End of variables declaration//GEN-END:variables
    private Set<Integer> filasModificadas = new HashSet<>();

    private final DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 2;
        }
    };

}
