/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import Entidades.Alumno;
import Entidades.AlumnoData;
import Entidades.Inscripcion;
import Entidades.InscripcionData;
import Entidades.Materia;
import Utilidades.ComboBox;
import Utilidades.Tabla;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class VistaManejoDeNotas extends javax.swing.JInternalFrame {

    /**
     * Creates new form ManejoDeNotas
     */
    public VistaManejoDeNotas() {
        initComponents();
        CompletableFuture.supplyAsync(() -> {
            AlumnoData alumnoData = new AlumnoData();
            List<Alumno> alumnos = alumnoData.listarAlumnos();

            return alumnos;
        }).thenAccept(alumnos -> {
            ComboBox.llenar(comboAlumnos, alumnos);
        });

        Tabla.crearCabeceras(tablaMaterias, modelo, new String[]{"id", "Nombre", "Nota"}, new int[]{75, 400, 400});
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboAlumnos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMaterias = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Notas");
        setPreferredSize(new java.awt.Dimension(778, 576));

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Seleccione un Alumno:");

        comboAlumnos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        comboAlumnos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboAlumnosItemStateChanged(evt);
            }
        });
        comboAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlumnosActionPerformed(evt);
            }
        });

        tablaMaterias.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tablaMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaMaterias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMateriasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMaterias);

        jButton1.setText("Guardar");
        jButton1.setMaximumSize(new java.awt.Dimension(61, 27));
        jButton1.setMinimumSize(new java.awt.Dimension(61, 27));
        jButton1.setPreferredSize(new java.awt.Dimension(61, 27));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 717, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboAlumnosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboAlumnosItemStateChanged

        Tabla.limpiarTabla(modelo);

        //System.out.println(((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno());
        InscripcionData inscripcionData = new InscripcionData();
        List<Inscripcion> inscripciones = inscripcionData.obtenerInscripcionesPorAlumno(((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno());

        inscripciones.forEach(inscripcion -> modelo.addRow(new Object[]{inscripcion.getMateria().getIdMateria(), inscripcion.getMateria().getNombre(), inscripcion.getNota()}));

    }//GEN-LAST:event_comboAlumnosItemStateChanged

    private void comboAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlumnosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboAlumnosActionPerformed

    private void tablaMateriasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMateriasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaMateriasMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int cantFilas = tablaMaterias.getModel().getRowCount();
        //System.out.println(cantFilas);
        InscripcionData inscripcionData = new InscripcionData();
        boolean bandera = false;

        for (int i = 0; i < cantFilas; i++) {
            int idAlumno = ((Alumno) comboAlumnos.getSelectedItem()).getIdAlumno();
            int idMateria = (int) tablaMaterias.getModel().getValueAt(i, 0);
            double nota = Double.parseDouble(tablaMaterias.getModel().getValueAt(i, 2).toString());

            boolean res = inscripcionData.actualizarNota(idAlumno, idMateria, nota);

            if (!res) {
                bandera = true;
            }
        }

        if (!bandera) {
            JOptionPane.showMessageDialog(this, "Nota/s actualizada/s");
        } else {
            JOptionPane.showMessageDialog(this, "Hubo un problema al actualizar la/s nota/s");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Alumno> comboAlumnos;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaMaterias;
    // End of variables declaration//GEN-END:variables

    //private final DefaultTableModel modelo = new DefaultTableModel();
    private final DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 2;
        }
    };

}
